name: Test Python bindings

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


env:
  RUST_BACKTRACE: full


jobs:
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Build and install package
        run: make build-python-dev PYTHON_INTERPRETER=python
      - name: Run linters
        run: make lint-python PYTHON_INTERPRETER=python

  test-python:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    #        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.12]
    #       python-version: [3.8, 3.9, 3.10, 3.11, 3.12]
        debug: [true, false]  # test with a debug build as it picks up errors which optimised release builds do not
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Run rust tests in debug=${{ matrix.debug }} mode
        run: |
          if ${{ matrix.debug }}; then
            make test-python BUILD_PROFILE=dev PYTHON_INTERPRETER=python
          else
            make test-python BUILD_PROFILE=release PYTHON_INTERPRETER=python
          fi

  profile-python:
    runs-on: macos-latest  # not working on linux, kernel virtualization blocked
    steps:
      - uses: actions/checkout@v4
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Run profiling in release mode
        run: sudo make profile-python PYTHON_INTERPRETER=python
      - name: Upload profiling results
        uses: actions/upload-artifact@v4
        with:
          name: python-profiling-results
          path: |
            # benchmarking results and flamegraph
            bindings/python/*.svg
          if-no-files-found: error

  compare-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: Run comparison
        run: make compare-python PYTHON_INTERPRETER=python
      - name: Upload comparison results
        uses: actions/upload-artifact@v4
        with:
          name: python-comparison-results
          path: |
            # comparison results
            bindings/python/*.svg
          if-no-files-found: error
