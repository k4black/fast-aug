name: Test Rust library

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


env:
  RUST_BACKTRACE: full


concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true


jobs:
  lint-rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - name: Run linters
        run: make lint-rust

  test-rust:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        debug: [true, false]  # test with a debug build as it picks up errors which optimised release builds do not
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - name: Run tests in debug=${{ matrix.debug }} mode
        shell: bash
        run: |
          if ${{ matrix.debug }}; then
            make test-rust BUILD_PROFILE=dev
          else
            make test-rust BUILD_PROFILE=release
          fi

  test-profile-rust:
    runs-on: macos-latest  # not working on linux, kernel virtualization blocked
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: false
      - name: Install rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: Cache rust
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.toml') }}
      - name: Run profiling in release mode
        run: sudo make profile-rust
      - name: Upload profiling results
        uses: actions/upload-artifact@v4
        with:
          name: rust-profiling-results
          path: |
            # build timings 
            fast_aug/target/cargo-timings/cargo-timing.html
            # benchmarking results
            fast_aug/target/criterion
            # flamegraph
            fast_aug/flamegraph*.svg
          if-no-files-found: error
